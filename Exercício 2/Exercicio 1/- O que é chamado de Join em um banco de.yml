- O que é chamado de Join em um banco de dados:
    É uma operação que faz a junção e combina colunas de uma ou mais tabelas de um banco de dados.

- Nomeie e explique 2 tipos de Join:
    Inner Join: Compara cada linha da tabela A com as linhas da tabela B para encontrar pares de linhas que satisfazem a condição de junção. Se a condição de junção for verdadeira
                os valores correspondentes das tabelas A e B serão combinados em uma nova linha e incluídos no conjunto de resultados.

    Left Join: Para cada linha da tabela A, a consulta a compara com todas as linhas da tabela B. Se um par de linhas fizer com que a condição de junção seja avaliado como TRUE, 
                os valores da coluna dessas linhas serão combinados para formar uma nova linha que será incluída no conjunto de resultados. Se uma linha da tabela “esquerda” A não tiver nenhuma 
                linha correspondente da tabela “direita” B, a consulta irá combinar os valores da coluna da linha da tabela “esquerda” A com NULL para cada valor da coluna da tabela da “direita” 
                B que não satisfaça a condição de junto (FALSE). Em resumo, a cláusula LEFT JOIN retorna todas as linhas da tabela “esquerda” A e as linhas correspondentes ou valores NULL da 
                tabela “esquerda” A.

- Para que é usado o Group By:
    A instrução GROUP BY identifica uma coluna selecionada a ser usada para agrupar os resultados. Separa os dados em grupos pelos valores da coluna especificada e retorna uma linha de 
    resultados para cada grupo. Usando quando há funçÕes agregadas.

- Para que é usado o Having:
    A cláusula HAVING é usada para especificar condições de filtragem em grupos de registros ou agregações.É frequentemente usada em conjunto com a cláusula GROUP BY para filtrar as colunas agrupadas.

- Questão 5 - Dados os diagramas a seguir, indique a qual tipo de Join cada um corresponde:
    -Inner Join
    - Left Join

- Questão 6 - Escreva uma consulta genérica para cada um dos diagramas abaixo:
  - Right Join: SELECT <coluna>
                FROM <Tabela A {apelido}>
                RIGHT JOIN <Tabela B {apelido}>
                ON a.Key = b.Key
                WHERE A.KEY IS NULL;
  
  - Full Join: SELECT <coluna>
               FROM <Tabela A {apelido}>
               FULL OUTER JOIN <Tabela B {apelido}>
               ON a.Key = b.Key;


--- Segunda parte 

- Mostre o título e o nome do gênero  de todas as séries:
  SELECT s.title, g.name 
  FROM series s
  INNER JOIN genres g ON s.genre_id = g.id; 

- Mostre o título dos episódios, os nomes e sobrenomes dos atores que atuam em cada um deles:
  SELECT ep.title, ac.first_name, ac.last_name
  FROM episodes ep
  INNER JOIN actor_episode aep ON (aep.episode_id = ep.id)
  RIGHT JOIN actors ac ON (aep.actor_id = ac.id)
  WHERE ep.title IS NOT null;

- Mostre o título das séries e o número total de temporadas que cada uma delas possui:
  SELECT s.title, COUNT(t.serie_id) as total
  FROM series s
  INNER JOIN seasons t ON (t.serie_id = s.id)
  GROUP BY s.title;

-Mostre o nome de todos os gêneros e o número total de filmes de cada um, desde que seja maior ou igual a 3:
  SELECT g.name, COUNT(m.genre_id) as total
  FROM genres g
  INNER JOIN movies m ON (m.genre_id = g.id)
  GROUP BY g.name
  HAVING total >= 3;

- Mostre apenas o nome e o sobrenome dos atores que atuam em todos os filmes Guerra nas estrelas e que não se repitam:
  SELECT ac.first_name, ac.last_name, m.title, m.id
  FROM actors ac
  INNER JOIN actor_movie am ON (am.actor_id = ac.id)
  RIGHT JOIN movies m ON (m.id = am.movie_id)
  HAVING (m.id = 3);